<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="BaseJavaModel.template.tt"#>
<#@ output extension="\\" #>
<#=writer.WriteHeader()#>
<#=host.CreatePackageDef()#>
<# var importNamespace = host.CurrentModel.GetNamespace().AddPrefix(); #>
import <#=importNamespace#>.core.IBaseClient;
import <#=importNamespace#>.core.BaseClient;
import <#=importNamespace#>.http.IHttpProvider;
import <#=importNamespace#>.authentication.IAuthenticationProvider;
import <#=importNamespace#>.logger.ILogger;
import <#=importNamespace#>.serializer.ISerializer;
import okhttp3.OkHttpClient;
import okhttp3.Request;

<#=TypeHelperJava.CreateClassDef(c.TypeName() + "Client<nativeRequestType>", c.BaseClientType() + "<nativeRequestType>", "IBaseClient<nativeRequestType>", c.Deprecation?.Description, " * @param <nativeRequestType> type of a request for the native http client")#>
    /**
     * Restricted constructor
     */
    protected GraphServiceClient() {
        setServiceRoot("<#=ConfigurationService.Settings.DefaultBaseEndpointUrl#>");
    }
    /**
     * Gets the service SDK version if the service SDK is in use, null otherwise
     * @return the service SDK version if the service SDK is in use, null otherwise
     */
    @Override
    @Nullable
    public String getServiceSDKVersion() {
        return <#=importNamespace#>.info.Constants.VERSION_NAME;
    }
    /**
     * Gets the builder to start configuring the client
     *
     * @return builder to start configuring the client
     */
    @Nonnull
    public static Builder<OkHttpClient, Request> builder() {
        return builder(OkHttpClient.class, Request.class);
    }

    /**
     * Gets the builder to start configuring the client
     *
     * @param <nativeClient> the type of the native http client
     * @param <nativeRequest> the type of the native http request
     * @param nativeClientClass the class of the native http client
     * @param nativeRequestClass the class of the native http request
     * @return builder to start configuring the client
     */
    @Nonnull
    public static <nativeClient, nativeRequest> Builder<nativeClient, nativeRequest> builder(@Nonnull final Class<nativeClient> nativeClientClass, @Nonnull final Class<nativeRequest> nativeRequestClass) {
        return new Builder<>();
    }
    /**
     * Builder to help configure the Graph service client
     * @param <nativeRequestType> type of a request for the native http client
     */
    public static class Builder<httpClientType, nativeRequestType> extends BaseClient.Builder<httpClientType, nativeRequestType> {
        /**
         * Sets the serializer.
         *
         * @param serializer
         *            the serializer
         * @return the instance of this builder
         */
        @Nonnull
        @Override
        public Builder<httpClientType, nativeRequestType> serializer(@Nonnull final ISerializer serializer) {
            super.serializer(serializer);
            return this;
        }

        /**
         * Sets the httpProvider
         *
         * @param httpProvider
         *            the httpProvider
         * @return the instance of this builder
         */
        @Nonnull
        @Override
        public Builder<httpClientType, nativeRequestType> httpProvider(@Nonnull final IHttpProvider<nativeRequestType> httpProvider) {
            super.httpProvider(httpProvider);
            return this;
        }

        /**
         * Sets the logger
         *
         * @param logger
         *            the logger
         * @return the instance of this builder
         */
        @Nonnull
        @Override
        public Builder<httpClientType, nativeRequestType> logger(@Nonnull final ILogger logger) {
            super.logger(logger);
            return this;
        }

        /**
         * Sets the http client
         *
         * @param client the http client
         *
         * @return the instance of this builder
         */
        @Nonnull
        @Override
        public Builder<httpClientType, nativeRequestType> httpClient(@Nonnull final httpClientType client) {
            super.httpClient(client);
            return this;
        }

        /**
         * Sets the authentication provider
         *
         * @param auth the authentication provider
         * @return the instance of this builder
         */
        @Nonnull
        @Override
        public Builder<httpClientType, nativeRequestType> authenticationProvider(@Nonnull final IAuthenticationProvider auth) {
            super.authenticationProvider(auth);
            return this;
        }

        /**
         * Builds and returns the Graph service client.
         *
         * @return the Graph service client object
         * @throws ClientException
         *             if there was an exception creating the client
         */
        @Nonnull
        @Override
        public GraphServiceClient<nativeRequestType> buildClient() throws ClientException {
            return buildClient(new GraphServiceClient<>());
        }
    }
<#
foreach (var prop in model.EntityContainer.Properties)
{
    var propertyName = prop.Name.ToUpperFirstChar();
    if (prop.IsCollection())
    {
#>

    /**
     * Gets the collection of <#=propertyName#> objects
     *
     * @return the request builder for the collection of <#=propertyName#> objects
<# if(prop.IsDeprecated) {#>
     * @deprecated <#= prop?.Deprecation?.Description #>
<# } #>
     */
<# if(prop.IsDeprecated) {#>
    @Deprecated
<# } #>
    @Nonnull
    public <#=prop.TypeCollectionRequestBuilder()#> <#=prop.Name#>() {
        return new <#=prop.TypeCollectionRequestBuilder()#>(getServiceRoot() + "/<#=prop.Name#>", this, null);
    }

    /**
     * Gets a single <#=propertyName#>
     *
     * @param id the id of the <#=propertyName#> to retrieve
     * @return the request builder for the <#=propertyName#> object
<# if(prop.IsDeprecated) {#>
     * @deprecated <#= prop?.Deprecation?.Description #>
<# } #>
     */
<# if(prop.IsDeprecated) {#>
    @Deprecated
<# } #>
    @Nonnull
    public <#=prop.TypeRequestBuilder()#> <#=prop.Name#>(@Nonnull final String id) {
        return new <#=prop.TypeRequestBuilder()#>(getServiceRoot() + "/<#=prop.Name#>/" + id, this, null);
    }
<#
    }
    else
    {
#>

    /**
     * Gets the <#=c.TypeRequestBuilder()#>
     *
     * @return the <#=prop.Projection.Type.GetTypeString()#>
<# if(prop.IsDeprecated) {#>
     * @deprecated <#= prop?.Deprecation?.Description #>
<# } #>
     */
<# if(prop.IsDeprecated) {#>
    @Deprecated
<# } #>
    @Nonnull
    public <#=prop.TypeRequestBuilderFullyQualified()#> <#=prop.Name#>() {
        return new <#=prop.TypeRequestBuilderFullyQualified()#>(getServiceRoot() + "/<#=prop.Name#>", this, null);
    }
<#
    }
}
#>
}
