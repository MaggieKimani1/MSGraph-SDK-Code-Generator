<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="BaseJavaModel.template.tt"#>
<#@ output extension="\\" #>
<#host.TemplateName = c.TypeCollectionRequestBuilder();#>
<#=writer.WriteHeader()#>
<#=host.CreatePackageDef()#>

<# var mainNamespace = host.CurrentNamespace(); #>
import <#=mainNamespace#>.<#=TypeHelperJava.GetPrefixForRequests()#>.<#=c.TypeCollectionRequestBuilder()#>;
import <#=mainNamespace#>.<#=TypeHelperJava.GetPrefixForRequests()#>.<#=c.TypeRequestBuilder()#>;
import <#=mainNamespace#>.<#=TypeHelperJava.GetPrefixForRequests()#>.<#=c.TypeCollectionRequest()#>;
<#
var currentTypeProjection = c.AsOdcmProperty().Projection.Type.AsOdcmClass();
if (currentTypeProjection != null) {
    foreach (var method in currentTypeProjection.MethodsAndOverloadsWithDistinctName()) {
        if (!method.IsBoundToCollection) {
            continue;
        }
        if (method.IsCollection) {
#>
import <#=mainNamespace#>.<#=TypeHelperJava.GetPrefixForRequests()#>.<#=method.TypeCollectionRequestBuilder()#>;
<#
        } else {
#>
import <#=mainNamespace#>.<#=TypeHelperJava.GetPrefixForRequests()#>.<#=method.TypeRequestBuilder()#>;
<#
        }
    }
}
#>
<# var importNamespace = host.CurrentModel.GetNamespace().AddPrefix(); #>
import <#=importNamespace#>.http.BaseCollectionRequestBuilder;
import <#=importNamespace#>.core.IBaseClient;
<# if (c.GetFeatures().CanCount && (currentTypeProjection == null || !currentTypeProjection.MethodsAndOverloads().Any(x => x.MethodName().Equals("Count")))) { #>
import <#=importNamespace#>.http.PrimitiveRequestBuilder;
<# } #>
<#
foreach (var method in currentTypeProjection.MethodsAndOverloads().Where(x => x.MethodHasParameters()).Select(x => mainNamespace + "." + c.GetPackagePrefix() + "." + x.TypeParameterSet()).Distinct()) {
#>
import <#=method#>;
<# } #>
<#=TypeHelperJava.CreateClassDef(c.TypeCollectionRequestBuilder(), "BaseCollectionRequestBuilder<"+c.TypeName()+", "+c.TypeRequestBuilder()+", "+c.TypeCollectionResponse()+", "+c.TypeCollectionPage()+", "+c.TypeCollectionRequest()+">", null, c.Deprecation?.Description)#>

    /**
     * The request builder for this collection of <#=c.ClassTypeName()#>
     *
     * @param requestUrl     the request URL
     * @param client         the service client
     * @param requestOptions the options for this request
     */
    public <#=c.TypeCollectionRequestBuilder()#>(@Nonnull final String requestUrl, @Nonnull final <#=c.IBaseClientType()#><?> client, @Nullable final java.util.List<? extends <#=importNamespace#>.options.Option> requestOptions) {
        super(requestUrl, client, requestOptions, <#=c.TypeRequestBuilder()#>.class, <#=c.TypeCollectionRequest()#>.class);
    }

<#
	if(host.TemplateName.Equals("DriveItemCollectionRequestBuilder")){
#>
    /**
     * Gets a request builder to the AppRoot folder.
     * @return a request builder to the AppRoot folder
     */
    @Nonnull
    public DriveItemRequestBuilder appRoot() {
    	return new DriveItemRequestBuilder(this.getRequestUrlWithAdditionalSegment("approot"), this.getClient(), null);
    }
<# } #>

<#
if (currentTypeProjection != null) {
    foreach (var method in currentTypeProjection.MethodsAndOverloadsWithDistinctName()) {

        if (!method.IsBoundToCollection) {
            continue;
        }

        if (method.IsCollection) {
#>

    /**
     * <#=TypeHelperJava.GetSanitizedDescription(method) ?? "Gets a builder to execute the method" #>
     * @return the request builder collection
<#if(method.MethodHasParameters()) { #>
     * @param parameters the parameters for the service method
<# } #>
<# if(method.IsDeprecated) {#>
     * @deprecated <#= method?.Deprecation?.Description #>
<# } #>
     */
<# if(method.IsDeprecated) {#>
    @Deprecated
<# } #>
    @Nonnull
    public <#=method.TypeCollectionRequestBuilder()#> <#=method.MethodName().ToLowerFirstChar()#>(<#if(method.MethodHasParameters()) { #>@Nonnull final <#=method.TypeParameterSet()#> parameters<# } #>) {
        return new <#=method.TypeCollectionRequestBuilder()#>(getRequestUrlWithAdditionalSegment("<#=method.MethodFullName()#>"), getClient(), null<#if(method.MethodHasParameters()) { #>, parameters<# } #>);
    }
<#
        } else {
#>

    /**
     * <#=TypeHelperJava.GetSanitizedDescription(method) ?? "Gets a builder to execute the method" #>
     * @return the request builder
<#if(method.MethodHasParameters()) { #>
     * @param parameters the parameters for the service method
<# } #>
<# if(method.IsDeprecated) {#>
     * @deprecated <#= method?.Deprecation?.Description #>
<# } #>
     */
<# if(method.IsDeprecated) {#>
    @Deprecated
<# } #>
    @Nonnull
    public <#=method.TypeRequestBuilder()#> <#=method.MethodName().ToLowerFirstChar()#>(<#if(method.MethodHasParameters()) { #>@Nonnull final <#=method.TypeParameterSet()#> parameters<# } #>) {
        return new <#=method.TypeRequestBuilder()#>(getRequestUrlWithAdditionalSegment("<#=method.MethodFullName()#>"), getClient(), null<#if(method.MethodHasParameters()) { #>, parameters<# } #>);
    }
<#
        }
    }
}
#>
<# if (c.GetFeatures().CanCount && (currentTypeProjection == null || !currentTypeProjection.MethodsAndOverloads().Any(x => x.MethodName().Equals("Count")))) { #>

    /**
     * Gets the raw count request for the collection
     * @return The raw count request for the collection
     */
    @Nonnull
    public PrimitiveRequestBuilder<Long> count() {
        return new PrimitiveRequestBuilder<Long>(getRequestUrlWithAdditionalSegment("$count"), getClient(), null, Long.class);
    }
<# } #>
}
