<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="SharedCSharp.template.tt"#>
<#

OdcmClass complex = host.CurrentType.AsOdcmClass();
var complexTypeName = complex.Name.ToCheckedCase();

var @namespace = complex.Namespace.GetNamespaceName();
var derivedTypeConverterTypeName = @namespace.GetCoreLibraryType("DerivedTypeConverter");

// In the case a complex type name ends with "Request", we will have a collision with the *Request objects
// when we generate. For example, there is a complex type named SearchRequest and an entity named Search.
// The SearchRequest complex type results in a SearchResult class in our models collection. The Search entity
// results in a SearchRequest request object causing conflicts.
var typeDeclaration = complexTypeName.DisambiguateTypeName();

// Capture the cstor type declaration as the typedeclaration may get appended with a base type.
string cstorTypeDeclaration = typeDeclaration;

if (complex.Base != null)
{
    // Disambiguate the base type declaration for the same reason we did this
    // for typeDeclaration.
    var baseTypeDeclaration = complex.Base.GetTypeString(complex.Namespace.GetNamespaceName()).DisambiguateTypeName();

    typeDeclaration = string.Format("{0} : {1}", typeDeclaration, baseTypeDeclaration);
}

var isMethodResponse = complex.LongDescriptionContains("methodResponse");

var attributeStringBuilder = new StringBuilder();

if (complex.IsDeprecated)
{
   attributeStringBuilder.Append(complex.GetDeprecationString());
}

// We'll use this to generate a default OData.type only if the base is abstract or if its base is possibly referenced as a type in a property.
var isBaseTypeReferenced = complex.IsBaseTypeReferenced() || (complex.Base != null && complex.Base.IsAbstract);

// We only want to add the derived type converter to the class that has any derived types
// and for abstract classes as they will have to be initialized as a derived type
// and for any objects that have an enum property to prevent serialization errors with System.Text.Json when a non existent value is used.
if (complex.Base == null || complex.Derived.Any() || complex.IsAbstract || complex.HasEnumProperties())
{
    if(attributeStringBuilder.Length > 0)
    {
        attributeStringBuilder.Append(Environment.NewLine);
        attributeStringBuilder.Append("    ");
    }
    attributeStringBuilder.AppendFormat("[JsonConverter(typeof({0}<{1}>))]", derivedTypeConverterTypeName, cstorTypeDeclaration);
}

#>

namespace <#=@namespace#>
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Text.Json.Serialization;

    /// <summary>
    /// The type <#=complexTypeName#>.
    /// </summary>
<#
if (attributeStringBuilder.Length > 0) {
#>
    <#=attributeStringBuilder.ToString()#>
<# } #>
    public partial class <#=typeDeclaration#>
    {
<#
        if (complex.IsAbstract)
        {
    #>

        ///<summary>
        /// The internal <#=complexTypeName#> constructor
        ///</summary>
        protected internal <#=cstorTypeDeclaration#>()
        {
            // Don't allow initialization of abstract complex types
        }
<#
        }
        else if (isBaseTypeReferenced)
        {
#>        /// <summary>
        /// Initializes a new instance of the <see cref="<#=cstorTypeDeclaration#>"/> class.
        /// </summary>
        public <#=cstorTypeDeclaration#>()
        {
            this.ODataType = "<#=complex.FullName#>";
        }
<#
        }
        foreach(var property in complex.Properties)
        {

            var propertyTypeString = property.GetTypeString(complex.Namespace.GetNamespaceName()).DisambiguateTypeName();
            var propertyType = property.IsCollection ? string.Format("IEnumerable<{0}>", propertyTypeString) : propertyTypeString;
            var propertyName = isMethodResponse
                ? property.Name.Substring(property.Name.IndexOf('.') + 1).ToCheckedCase()
                : property.Name.ToCheckedCase().GetSanitizedPropertyName(property);

            var attributeDefinition = string.Format("[JsonPropertyName(\"{0}\")]", property.Name);

            if (property.IsDeprecated)
            {
                attributeDefinition = property.GetDeprecationString() + Environment.NewLine + "        " + attributeDefinition;
            }

            if (property.IsTypeNullable() || property.IsCollection)
            {
    #>

        /// <summary>
        /// Gets or sets <#=property.Name#>.
<# if (property.LongDescription != null || property.Description != null) {
#>
        /// <#=property.GetSanitizedLongDescription()#>
<# } #>
        /// </summary>
        <#=attributeDefinition#>
        public <#=propertyType#> <#=propertyName#> { get; set; }
    <#
        }
        else
        {
    #>

        /// <summary>
        /// Gets or sets <#=property.Name#>.
<# if (property.LongDescription != null || property.Description != null) {
#>
        /// <#=property.GetSanitizedLongDescription()#>
<# } #>
        /// </summary>
        <#=attributeDefinition#>
        public <#=propertyType#>? <#=propertyName#> { get; set; }
    <#
            }
        }

    // Only include AdditionalData in the base classes.
    // Adding odata.type to all complex types with no base class.
    if (complex.Base == null)
    {
    #>

        /// <summary>
        /// Gets or sets additional data.
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalData { get; set; }

        /// <summary>
        /// Gets or sets @odata.type.
        /// </summary>
        [JsonPropertyName("@odata.type")]
        public string ODataType { get; set; }
    <#
    }
    #>

    }
}
