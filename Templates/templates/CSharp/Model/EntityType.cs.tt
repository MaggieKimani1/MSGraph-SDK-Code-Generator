<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="SharedCSharp.template.tt"#>
<#

OdcmClass entity = host.CurrentType.AsOdcmClass();
var entityName = entity.Name.ToCheckedCase();

var @namespace = entity.Namespace.GetNamespaceName();
var derivedTypeConverterTypeName = @namespace.GetCoreLibraryType("DerivedTypeConverter");

// In the case a entity type name ends with "Request", we will have a collision with the Request objects
// when we generate. For example, there are entities named EventMessage and EventMessageRequest. Those entities
// lead to the generation of an EventMessageRequest and EventMessageRequestRequest request objects in the same
// namespace as the entities. We add 'Object' to the end of the name to disambiguate the entity.
// This change needs to sync with changes for the *Request templates.

var typeDeclaration = entityName.DisambiguateTypeName();

string cstorTypeDeclaration = typeDeclaration;

if (entity.Base != null)
{
    var baseTypeDeclaration = entity.Base.GetTypeString(entity.Namespace.GetNamespaceName()).DisambiguateTypeName();

    typeDeclaration = string.Format("{0} : {1}", typeDeclaration, baseTypeDeclaration);
}

var attributeStringBuilder = new StringBuilder();

if (entity.IsDeprecated)
{
   attributeStringBuilder.Append(entity.GetDeprecationString());
}

// We'll use this to generate a default OData.type only if the base is abstract or if its base is possibly referenced as a type in a property.
// Note that we exclude the entity type in this search to avoid setting the type under entity
var isBaseTypeReferenced = entity.IsBaseTypeReferenced() || (entity.Base != null && entity.Base.Name != "entity" && entity.Base.IsAbstract);

// We only want to add the derived type converter to the class that has any derived types
// and for abstract classes as they will have to be initialized as a derived type
// and for any objects that have an enum property to prevent serialization errors with System.Text.Json when a non existent value is used.
if (entity.Base == null || entity.Derived.Any() || entity.IsAbstract || entity.HasEnumProperties())
{
    if(attributeStringBuilder.Length > 0)
    {
        attributeStringBuilder.Append(Environment.NewLine);
        attributeStringBuilder.Append("    ");
    }
    attributeStringBuilder.AppendFormat("[JsonConverter(typeof({0}<{1}>))]", derivedTypeConverterTypeName, cstorTypeDeclaration);
}

#>

namespace <#=@namespace#>
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Text.Json.Serialization;

    /// <summary>
    /// The type <#=entityName.SplitCamelCase()#>.
    /// </summary>
<#
if (attributeStringBuilder.Length > 0) {
#>
    <#=attributeStringBuilder.ToString()#>
<# } #>
    public partial class <#=typeDeclaration#>
    {
    <#
        if (entity.IsAbstract)
        {
    #>

        ///<summary>
        /// The internal <#=entityName#> constructor
        ///</summary>
        protected internal <#=cstorTypeDeclaration#>()
        {
            // Don't allow initialization of abstract entity types
        }
    <#
        }
        else if (isBaseTypeReferenced)
        {
    #>

        ///<summary>
        /// The <#=entityName#> constructor
        ///</summary>
        public <#=cstorTypeDeclaration#>()
        {
            this.ODataType = "<#=entity.FullName#>";
        }
<#
        }
        foreach(var property in entity.Properties)
        {
            var propertyTypeString = property.GetTypeString(entity.Namespace.GetNamespaceName()).DisambiguateTypeName();
            var propertyType = property.IsTypeNullable() || property.IsCollection()
                    ? propertyTypeString
                    : propertyTypeString + "?";

            // We want to disambiguate structural property return types in case there is a naming
            // collision with a request builder, like what we had for the Search entity, and the SearchRequest
            // complex type.
            if (propertyType.EndsWith("Request") && property.IsNavigation() == false)
            {
                propertyType = String.Concat(propertyType, "Object");
            }

            var propertyName = property.Name.ToCheckedCase();
            var propertyCollectionPage = property.IsReference() ? string.Concat(entityName, propertyName, "CollectionWithReferencesPage") : string.Concat(entityName, propertyName, "CollectionPage");

            var attributeDefinition = string.Format("[JsonPropertyName(\"{0}\")]", property.Name);

            if (property.IsDeprecated)
            {
                attributeDefinition = property.GetDeprecationString() + Environment.NewLine + "        " + attributeDefinition;
            }

            if (property.IsCollection())
            {
                if (property.IsNavigation())
                {
    #>

        /// <summary>
        /// Gets or sets <#=property.Name.SplitCamelCase().ToLower()#>.
<# if (property.LongDescription != null || property.Description != null) {
#>
        /// <#=property.GetSanitizedLongDescription()#>
<# } #>
        /// </summary>
        <#=attributeDefinition#>
        public I<#=propertyCollectionPage#> <#=propertyName.GetSanitizedPropertyName()#> { get; set; }

<#
                    if (property.IsComplex())
                    {
                        var collectionPropertyName = property.Name.ToCheckedCase().GetSanitizedPropertyName();
#>
        /// <summary>
        /// Gets or sets <#=collectionPropertyName.ToLowerFirstChar()#>NextLink.
        /// </summary>
        [JsonPropertyName("<#=collectionPropertyName.ToLowerFirstChar()#>@odata.nextLink")]
        [JsonConverter(typeof(NextLinkConverter))]
        public string <#=collectionPropertyName#>NextLink { get; set; }
    <#
                    }
                }
                else
                {
    #>

        /// <summary>
        /// Gets or sets <#=property.Name.SplitCamelCase().ToLower()#>.
<# if (property.LongDescription != null || property.Description != null) {
#>
        /// <#=property.GetSanitizedLongDescription()#>
<# } #>
        /// </summary>
        <#=attributeDefinition#>
        public IEnumerable<<#=propertyType#>> <#=propertyName.GetSanitizedPropertyName()#> { get; set; }
    <#
                }
            }
            else
            {
    #>

        /// <summary>
        /// Gets or sets <#=property.Name.SplitCamelCase().ToLower()#>.
<# if (property.LongDescription != null || property.Description != null) {
#>
        /// <#=property.GetSanitizedLongDescription()#>
<# } #>
        /// </summary>
        <#=attributeDefinition#>
        public <#=propertyType#> <#=propertyName.GetSanitizedPropertyName(property)#> { get; set; }
    <#
            }
        }

    // Only include @odata.type and AdditionalData in the base classes.
    if (entity.Base == null)
    {
    #>

        /// <summary>
        /// Gets or sets @odata.type.
        /// </summary>
        [JsonPropertyName("@odata.type")]
        public string ODataType { get; set; }

        /// <summary>
        /// Gets or sets additional data.
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalData { get; set; }
    <#
    }
    #>

    }
}

